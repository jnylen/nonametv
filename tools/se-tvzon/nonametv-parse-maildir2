#!/usr/bin/perl -w

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Mail::Box;
use Mail::Box::Manager;
use MIME::Base64;

use File::Temp qw/tempdir/;
use File::Copy qw/move copy/;
use File::Basename;

use Getopt::Long;
use Digest::MD5;
use Data::Dumper;

use Time::Piece;

use Encode qw/decode/;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Factory qw/CreateFileStore CreateDataStore/;
use NonameTV::Log qw/d p w f SetVerbosity StartLogSection EndLogSection/;

my $opt = { manual => 0,
            test => 0,
	    verbose => 0,
	    quiet => 0,
            };

my $res = GetOptions( $opt, qw/manual test verbose/ );

$opt->{verbose} = 1 if $opt->{manual};

SetVerbosity( $opt->{verbose}, $opt->{quiet} );

if( not $res ) {
  print << 'EOHELP';
 [--manual] [--test] [--verbose]

Extract files from mails in a maildir and store them using
NonameTV::FileStore.

  --manual  Ask the user which Importer to use if the information
            cannot be derived from the message.

  --test    Run the importer in test-mode.

EOHELP

  exit 1;
}

my $ds = CreateDataStore();

my $root = "/content/maildir/.Projects/";
my @folders = qw(
            NonameTV-Data.DWDE
            NonameTV-Data.HaC
            NonameTV-Data.ETVMedia
            NonameTV-Data.VisjonNorge
            NonameTV-Data.Turner
            NonameTV-Data.DMB
            NonameTV-Data.PPS
            NonameTV-Data.ServusTV
            NonameTV-Data.DreiPlus
            NonameTV-Data.Classica
            NonameTV-Data.HopeChannel
            NonameTV-Data.Discovery
            NonameTV-Data.FightSports
            NonameTV-Data.YFE
            NonameTV-Data.Tele5
            NonameTV-Data.Matkanalen
            NonameTV-Data.Highview
            NonameTV-Data.MTV
            NonameTV-Data.Mezzo
            NonameTV-Data.HighTV
            NonameTV-Data.EBS
            NonameTV-Data.Euronews
            NonameTV-Data.Gospel
            NonameTV-Data.RTL2
        );
#
# Flag messages AFTER they have been processed. Then I normally
# only have to move the message to the correct folder.

my $tmpdir = tempdir( CLEANUP => 1 );

my $mgr = Mail::Box::Manager->new;

StartLogSection( "nonametv-parse-maildir", 0 );

foreach my $dir (@folders) {
  my $folder = $mgr->open( "$root.$dir",
                           create => 1,
                           access => 'rw',
                           extract => 'ALWAYS' );

  my $dir_pretty = $dir;
  $dir_pretty =~ s/NonameTV-Data\.//i;
  p "Running through $dir_pretty";
  my $now = localtime;

  foreach my $message ($folder->messages) {
    # Flag for delete
    if($message->label( 'flagged' )) {
      my $before = localtime($message->timestamp);
      if(($now - $before)->days > 110) {
        $message->delete;
      }

      next; # Skip
    }
    #next unless $message->isMultipart;

    # Use Encode::MIME::Header
    my $subject = decode( 'MIME-Header', $message->get( 'Subject' ) ) || '';
    my $from = $message->get( 'From' );

    if( process_parts( $message, $dir, $from, $subject ) ) {
      $message->label( 'flagged' => 1 );
      d "Processing succeeded.";
    }
    else {
      d "Processing failed.";
    }
  }

  # Close it
  $folder->close;
}

$mgr->closeAllFolders;

EndLogSection( "nonametv-parse-maildir" );

sub process_parts
{
  my( $part, $dir, $from, $subject ) = @_;

  my $type = $part->get('Content-Type');
#  return 0 if $type eq "text/plain";

  if($part->isMultipart)
  {
    my $count = 0;
    foreach my $child ($part->parts)
    {
      $count += process_parts( $child, $dir, $from, $subject );
    }
    return $count;
  }
  else
  {
    my $disp = $part->body->disposition;
    my $name = decode( 'MIME-Header',
		       $part->body->dispositionFilename ) || 'noname';
    my $size = $part->body->size;

    my $channel = guess_channel( $dir, $from, $subject, $name, $type, $size );

    if( (not defined $channel) and $opt->{manual} )
    {
      print "$name ($size bytes): ";
      $channel = <STDIN>;
      $channel =~ tr/\n\r //d;
      $channel = undef if $channel eq "";
    }

    if( not defined $channel ) {
      d "$name skipped.";
      return 0;
    }

    my $chd = $ds->sa->Lookup( 'channels', {xmltvid => $channel} );

    die "Unknown channel $channel" if not defined $chd;

    p "Adding file $name for $channel";

    my $fs = GetFileStore( $chd->{grabber} );
    my ($content);

    # Channels you only want it decoded, not fucked up
    if($name =~ /\.xml$/i) {
        $content = decode_base64($part->body);
    } else {
        $content = $part->decoded->string;
    }


    #print Dumper($content);
    $fs->AddFile( $channel, $name, \$content );
  }

  return $opt->{test} ? 0 : 1;
}

sub guess_channel
{
  my( $dir, $from, $subject, $filename, $type, $size ) = @_;
  #print Dumper($dir, $from, $subject, $filename, $type, $size);

 if( $dir =~ /Turner/ ) {
   # Tivo took it over
   if($filename =~ /Boomerang_Nordic/i and $filename =~ /XML/i) {
     return "boomerangtv.eu"    if $filename =~ /_ENG_/i;
     return "boomerangtv.se"    if $filename =~ /_SWE_/i;
     return "boomerangtv.no"    if $filename =~ /_NOR_/i;
     return "boomerangtv.dk"    if $filename =~ /_DAN_/i;
   }

   if($filename =~ /Cartoon_Network_Nordic/i and $filename =~ /XML/i) {
     return "cartoonnetwork.com" if $filename =~ /_ENG_/i;
     return "cartoonnetwork.se" if $filename =~ /_SWE_/i;
     return "cartoonnetwork.no" if $filename =~ /_NOR_/i;
     return "cartoonnetwork.dk" if $filename =~ /_DAN_/i;
   }

   if($filename =~ /Cartoon_Network_CEE/i and $filename =~ /XML/i) {
     return "cartoonnetwork.nl" if $filename =~ /_DUT_/i;
   }

   if($filename =~ /TCM_Nordic/i and $filename =~ /XML/i) {
     return "tcmeurope.com"     if $filename =~ /_ENG_/i;
     return "se.tcmeurope.com"  if $filename =~ /_SWE_/i;
     return "no.tcmeurope.com"  if $filename =~ /_NOR_/i;
     return "dk.tcmeurope.com"  if $filename =~ /_DAN_/i;
   }

   if($filename =~ /CNNi/i and $filename =~ /XML/i) {
     return "cnn.com" if $filename =~ /_ENG_/i;
   }

  # XLS Nordic
  if( $filename =~ /\.(xls|xlsx|xlsm)$/i ) {
    return "tnt-tv.se" if $filename =~ /^TNT/i and $filename =~ /Sweden/i;
	  return "tnt-tv.dk" if $filename =~ /^TNT/i and $filename =~ /Danmark/i;
    return "tnt-tv.dk" if $filename =~ /^TNT/i and $filename =~ /Denmark/i;
	  return "tnt-tv.no" if $filename =~ /^TNT/i and $filename =~ /Norway/i;
    return "tnt-tv.dk" if $filename =~ /^TNT/i and $filename =~ /DAN/i;
    return "tnt-tv.dk" if $filename =~ /^TNT/i and $filename =~ /DEN/i;
    return "tnt-tv.se" if $filename =~ /^TNT/i and $filename =~ /SWE/i;
    return "tnt-tv.no" if $filename =~ /^TNT/i and $filename =~ /NOR/i;

    # Subject title
    if( $subject =~ /TNT NORDIC/i ) {
      return "tnt-tv.dk" if $filename =~ /DAN/i;
      return "tnt-tv.dk" if $filename =~ /DEN/i;
      return "tnt-tv.se" if $filename =~ /SWE/i;
      return "tnt-tv.no" if $filename =~ /NOR/i;
    }
  }
 }

 if( $dir =~ /Euronews/ and $filename =~ /\.(xls|xlsx)/i ) {
    return "euronews.com";
 }

 if( $dir =~ /MTV/ ) {

    # excel (XLSX)
    if($filename =~ /\.xlsx$/i) {
    	return "classic.vh1.se" if $filename =~ /vh1.*euro.*classic/i;
    	return "classic.vh1.se" if $filename =~ /vh1euroclassic/i;

    	if($filename =~ /^mtv.*live/i) {
    	    return "hd.mtv.se";
    	}
    }

    # excel (XLS)
    if($filename =~ /\.xls$/i) {
      return "classic.vh1.se" if $filename =~ /vh1.*euro.*classic/i;

      if($filename =~ /^mtv.*live/i) {
    	  return "hd.mtv.se" if $filename =~ /listings/i;
    	}
    }

    # XML
    if($filename =~ /\.xml$/i) {
      return "vh1.eu" if $filename =~ /^VH1E_UK/i;

    }
 }

 if( $dir =~ /PokerChannel/ and $filename =~ /\.xlsx$/i ) {
     return "ginx.tv";
 }

 if( $dir =~ /Mezzo/ ) {
    if($filename =~ /\.xls$/i) {
        return "hd.mezzo.tv" if $filename =~ /hd/i; # import mezzo live hd channel
        return "mezzo.tv" if $filename !~ /hd/i; # dont import mezzo live hd channel
    } elsif($filename =~ /\.xlsx$/i) {
        return "hd.mezzo.tv" if $filename =~ /hd/i; # import mezzo live hd channel
        return "mezzo.tv" if $filename !~ /hd/i; # dont import mezzo live hd channel
    }
 }

 if( $dir =~ /HighTV/ and $filename =~ /\.xls$/i ) {
     return "hightv.tv" if $filename =~ /epg/i;
 }

 # BBC
 if( $dir =~ /EBS/ and $filename =~ /\.xls$/i ) {
    # ENT. (BRIT) NORDIC
    return "bbcentertainment.com" if $filename =~ /brit\s+scandi/i;

    # Norway
    return "no.bbcentertainment.no" if $filename =~ /brit\s+norway/i;

    # ENT. (BRIT) EU
    return "bbcentertainment.eu" if $filename =~ /brit\s+europe/i;

    # HD
    return "bbchd.com" if $filename =~ /hd\s+scandi/i;
    return "bbchd.com" if $subject =~ /bbc\s+hd\s+scandi/i;

    # KNOW. (EARTH)
    return "bbcknowledge.com" if $filename =~ /knowledge\s+scandi/i;
    return "bbcknowledge.com" if $filename =~ /earth\s+scandi/i;

    # Lifestyle
    return "bbclifestyle.com" if $filename =~ /lifestyle\s+scandi/i;
 }

 # Discovery
 if( $dir =~ /EBS/ and $filename =~ /\.doc$/i ) {
   # sweden
   return "animalplanet.se"     if $filename =~ /^ap.eu.swe/i;
   return "discoverychannel.se" if $filename =~ /discovery\s+sweden\s+swe/i;
   return "discoverychannel.se" if $filename =~ /discovery\s+channel\s+sweden\s+swe/i;
   return "discoverychannel.se" if $filename =~ /^dc.swe.swe/i;
   return "tlcsverige.se"       if $filename =~ /tlc\s+sweden\s+swedish/i;
   return "investigation.discoverychannel.se" if $filename =~ /^id.swe.swe/i;
   return "hdshowcase.discoverychannel.com"   if $filename =~ /^dc.hd.swe/i;
   return "science.discoverychannel.com"      if $filename =~ /^sc.eu.swe/i;
   return "world.discoveryworld.se" if $filename =~ /^dw.eu.swe/i;

   # denmark
   return "animalplanet.discovery.dk"     if $filename =~ /^ap.eu.dan/i;
   return "discovery.dk"                  if $filename =~ /discovery\s+channel\s+denmark/i;
   return "tlc.discovery.dk"              if $filename =~ /tlc\s+denmark/i;
   return "hdshowcase.discovery.dk"       if $filename =~ /^dc.hd.dan/i;
   return "science.discovery.dk"          if $filename =~ /^sc.eu.dan/i;
   return "world.discovery.dk"            if $filename =~ /^dw.eu.dan/i;

   # finland
   return "discovery.fi"                  if $filename =~ /discovery\s+finland/i and $filename =~ /\(fin\)/i;
   return "discovery.fi"                  if $filename =~ /^dc.eu.fin/i;
   return "animalplanet.discovery.fi"     if $filename =~ /^ap.eu.fin/i;

   # norway
   return "animalplanet.discovery.no"     if $filename =~ /^ap.eu.nor/i;
   return "discovery.no"                  if $filename =~ /discovery\s+channel\s+norway/i;
   return "hdshowcase.discovery.no"       if $filename =~ /^dc.hd.nor/i;
   return "tlc.discovery.no"              if $filename =~ /tlc\s+norway/i;
   return "investigation.discovery.no"    if $filename =~ /dc.id.nor/i;
   return "science.discovery.no"          if $filename =~ /^sc.eu.nor/i;
   return "world.discovery.no"            if $filename =~ /^dw.eu.nor/i;

   # english (europe)
   return "animalplanet.discovery.eu"     if $filename =~ /^ap.eu.eng/i;
   return "en.discoverychannel.se"        if $filename =~ /^dc.swe.eng/i;
   return "hd.discovery.eu"               if $filename =~ /^dc.hd.eng/i;

 }

 if( $dir =~ /RTL2/ and $filename =~ /\.xml$/i ) {
  	return "rtl2.de"; # ÅÄÖ becomes ? in their mails.
 }

 if( $dir =~ /Gospel/ and $filename =~ /\.xls$/i ) {
   	return "gospel.tv";
 }

 if( $dir =~ /VisjonNorge/ and $filename =~ /\.xls$/i ) {
    return "visjonnorge.com";
 }

 if( $dir =~ /DWDE/ and $filename =~ /\.(xls|xlsx)/i ) {
   return "dw.de" if $filename =~ /English/i; #otherwise english.dw.de
   return "la.dw.de" if $filename =~ /Espanol/i;
   return "dw.de" if $filename =~ /Europa/i;
   return "dw.de" if $filename =~ /^DW\s+/i;

   return "asien.dw.de" if $filename =~ /Deutsch/i and $filename !~ /Deutsch\+/o;
   return "deutschplus.dw.de" if $filename =~ /Deutsch\+/i;

 }

 if( $dir =~ /HaC/ and $filename =~ /\.xml$/i ) {
     return "horseandcountry.tv";
 }

 if( $dir =~ /FightSports/ and $filename =~ /\.xls/i ) {
     return "fsf.fightsports.tv" if $filename =~ /(FSF|FR|NB)/i; # Nordics, France and Baltics
     #return "eu.fightsports.tv" if $filename =~ /eu/i; # Spain and EX Yugo
 }

 if( $dir =~ /ETVMedia/ ) {
    # Channel 1 Russia
    if( $filename =~ /\.rtf$/i ) {
       return "1tvrus.com";
    }

    # TBN
    if( $filename =~ /TBN/i ) {
    #   return "tbn.org";
    }

    if( $subject =~ /WFC/i and $filename =~ /\.(xls|xlsx|txt)$/i ) {
    #    return "wfc.tv";
    }

    if( ( $subject =~ /fashiontv/i or $from =~ /\@ftv.com/i ) and $filename =~ /\.xlsx$/i ) {
        return "ftv.com" if $filename =~ /hotbird/i;
        return "hd.ftv.com" if $filename =~ /eurobird/i;
    }
 }

 if( $dir =~ /DMB/ ) {
    # Sony Entertainment TV, Gmbh.
    if($filename =~ /\.xml$/i or $filename =~ /\.xls$/i) {
        return "axntv.de" if $filename =~ /^AXN-/i;
        return "animax.tv" if $filename =~ /^AAX-/i;
        return "sonyentertainment.tv" if $filename =~ /^SEN-/i;
    }

    # ITV
    if($filename =~ /\.xml$/i) {
        return "familytv.de" if $filename =~ /^FamilyTV_/i;
    #    return "dasneue.tv" if $filename =~ /^DasNeueTV_/i;
        return "blizztv.de" if $filename =~ /^Blizz_/i;
    }
 }

 if( $dir =~ /PPS/ ) {
    return "disneychannel.de" if $filename =~ /\.(xml|zip)$/i;
 }

 if( $dir =~ /Tele5/ and $filename =~ /\.xml$/i ) {
    return "tele5.de";
 }

 if( $dir =~ /ServusTV/ and $filename =~ /\.xml$/i and $filename =~ /struppi/i ) {
    return "servustv.de" if $filename =~ /DE/i;
    return "servustv.com" if $filename !~ /DE/i;
 }

 if ( $dir =~ /OKGoteborg/ and $filename =~ /\.doc$/i ) {
  #  return "oppnakanalengoteborg.se";
 }

 if( $dir =~ /DreiPlus/ and $filename =~ /\.(zip|xml)$/i ) {
   return "3plus.tv" if $filename =~ /^dreiplus/i;
   return "4plus.tv" if $filename =~ /^vierplus/i;
   return "5plus.tv" if $filename =~ /^fuenfplus/i;
 }

 if( $dir =~ /Classica/ and $filename =~ /\.xlsx$/i ) {
 #  return "classica.de";
 }

 if( $dir =~ /HopeChannel/ and $filename =~ /\.xml$/i ) {
   return "hope-channel.de";
 }

 if( $dir =~ /Discovery/ and $filename =~ /\.(xml|zip)$/i ) {
    return "dmax.discovery.de" if $filename =~ /^dmax/i;
    return "tlc.discovery.de" if $filename =~ /^tlc/i;
    return "animalplanet.discovery.de" if $filename =~ /^ap/i;
    #return "discovery.de" if $filename =~ /^dc/i;
 }

 if( $dir =~ /YFE/ and $filename =~ /\.xls$/i ) {
    return "fixundfoxi.tv" if $filename =~ /Fix&Foxi/i;
    return "rictv.de" if $filename =~ /RiC/i;
 }

 if( $dir =~ /Matkanalen/ and $filename =~ /\.xls$/i ) {
    return "matkanalen.tv";
 }

 if( $dir =~ /Highview/ ) {
    return "planet-tv.de" if $filename =~ /planet/i and $filename =~ /\.xml$/i;
 }

  return undef;
}

my $filestores = {};

sub GetFileStore {
  my( $importer ) = @_;

  if( not defined $filestores->{$importer} ) {
    $filestores->{$importer} = CreateFileStore( $importer );
  }

  return $filestores->{$importer}
}

sub md5sum {
  my( $file ) = @_;
  open(FILE, $file) or die "Can't open '$file': $!";
  binmode(FILE);

  return Digest::MD5->new->addfile(*FILE)->hexdigest;
}
