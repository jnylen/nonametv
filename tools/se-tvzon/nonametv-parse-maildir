#!/usr/bin/perl -w

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Mail::Box;
use Mail::Box::Manager;
use MIME::Base64;

use File::Temp qw/tempdir/;
use File::Copy qw/move copy/;
use File::Basename;

use Getopt::Long;
use Digest::MD5;
use Data::Dumper;

use Encode qw/decode/;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Factory qw/CreateFileStore CreateDataStore/;
use NonameTV::Log qw/d p w f SetVerbosity StartLogSection EndLogSection/;

my $opt = { manual => 0,
            test => 0,
	    verbose => 0,
	    quiet => 0,
            };

my $res = GetOptions( $opt, qw/manual test verbose/ );

$opt->{verbose} = 1 if $opt->{manual};

SetVerbosity( $opt->{verbose}, $opt->{quiet} );

if( not $res ) {
  print << 'EOHELP';
 [--manual] [--test] [--verbose]

Extract files from mails in a maildir and store them using
NonameTV::FileStore.

  --manual  Ask the user which Importer to use if the information
            cannot be derived from the message.

  --test    Run the importer in test-mode.

EOHELP

  exit 1;
}

my $ds = CreateDataStore();

my $root = "/content/maildir/.Projects/";
my @folders = qw(NonameTV-Data.GlobalListings
		 NonameTV-Data.France24
		 NonameTV-Data.CNBC
		 NonameTV-Data.FuelTV
		 NonameTV-Data.LuxeTV
		 NonameTV-Data.GodTV
		 NonameTV-Data.TVChile
		 NonameTV-Data.TravelChannel
		 NonameTV-Data.Kanal10
		 NonameTV-Data.Bloomberg
		 NonameTV-Data.Motors
		 NonameTV-Data.LifestyleTV
		 NonameTV-Data.Gmail
		 NonameTV-Data.Playboy
		 NonameTV-Data.Hustler
		 NonameTV-Data.YaS
		 NonameTV-Data.ATV
     NonameTV-Data.Fatstone
     NonameTV-Data.Disney
     NonameTV-Data.Uptown
     NonameTV-Data.KinoPolska
		 );
# Flag messages AFTER they have been processed. Then I normally
# only have to move the message to the correct folder.

my $tmpdir = tempdir( CLEANUP => 1 );

my $mgr = Mail::Box::Manager->new;

StartLogSection( "nonametv-parse-maildir", 0 );

foreach my $dir (@folders) {
  my $folder = $mgr->open( "$root.$dir",
                           create => 1,
                           access => 'rw',
                           extract => 'ALWAYS' );

  my $dir_pretty = $dir;
  $dir_pretty =~ s/NonameTV-Data\.//i;
  p "Running through $dir_pretty";

  foreach my $message ($folder->messages) {
    # Flag for delete
    if($message->label( 'flagged' )) {
        next; # Skip
    }
    #next unless $message->isMultipart;

    # Use Encode::MIME::Header
    my $subject = decode( 'MIME-Header', $message->get( 'Subject' ) ) || '';
    my $from = $message->get( 'From' );

    #d "Processing $from - $subject";

    if( process_parts( $message, $dir, $from, $subject ) ) {
      $message->label( 'flagged' => 1 );
      d "Processing succeeded.";
    }
    else {
      d "Processing failed.";
    }
  }
}

$mgr->closeAllFolders;

EndLogSection( "nonametv-parse-maildir" );

sub process_parts
{
  my( $part, $dir, $from, $subject ) = @_;

  my $type = $part->get('Content-Type');
#  return 0 if $type eq "text/plain";

  if($part->isMultipart)
  {
    my $count = 0;
    foreach my $child ($part->parts)
    {
      $count += process_parts( $child, $dir, $from, $subject );
    }
    return $count;
  }
  else
  {
    my $disp = $part->body->disposition;
    my $name = decode( 'MIME-Header',
		       $part->body->dispositionFilename ) || 'noname';
    my $size = $part->body->size;

    my $channel = guess_channel( $dir, $from, $subject, $name, $type, $size );

    if( (not defined $channel) and $opt->{manual} )
    {
      print "$name ($size bytes): ";
      $channel = <STDIN>;
      $channel =~ tr/\n\r //d;
      $channel = undef if $channel eq "";
    }

    if( not defined $channel ) {
      d "$name skipped.";
      return 0;
    }

    my $chd = $ds->sa->Lookup( 'channels', {xmltvid => $channel} );

    die "Unknown channel $channel" if not defined $chd;

    p "Adding file $name for $channel";

    my $fs = GetFileStore( $chd->{grabber} );
    my ($content);

    # Channels you only want it decoded, not fucked up
    if($name =~ /\.xml$/i or $channel eq "international.rt.com" or $channel eq "russia.rt.com") {
        $content = decode_base64($part->body);
    } else {
        $content = $part->decoded->string;
    }


    #print Dumper($content);
    $fs->AddFile( $channel, $name, \$content );
  }

  return $opt->{test} ? 0 : 1;
}

sub guess_channel
{
  my( $dir, $from, $subject, $filename, $type, $size ) = @_;

  if( $dir =~ /Disney/ and $filename =~ /\.(xls|zip|xlsx)$/i ) {
    # The Disney filenames are very unreliable.
    if( $filename eq "noname" ) {
      return undef;
    }
    elsif( $filename eq /\.(jpg|png|jpeg|gif|bmp)$/ ) {
      return undef;
    }
    elsif( $filename =~ /\bxd/i ) {
      return "xd.disneychannel.se";
    }
    if( $filename =~ /\bdxd/i ) {
      return "xd.disneychannel.se";
    }
    elsif( $filename =~ /junior/i and $filename =~ /\(0500/i ) {
      return "junior.disney.se";
    }
    elsif( $filename =~ /disney\s*channel/i and $filename !~ /\((\d\d\d\d)/i ) {
      return "disneychannel.se";
    }
    elsif( $subject =~ /junior/i and $filename =~ /\(0500/i ) {
      return "junior.disney.se";
    }
    elsif( $subject =~ /drj/i and $filename =~ /\(0500/i ) {
      return "junior.disney.se";
    }
    elsif( $subject =~ /djr/i and $filename =~ /\(0500/i ) {
      return "junior.disney.se";
    }
    elsif( $subject =~ /disney\s*channel/i and $filename !~ /\((\d\d\d\d)/i ) {
      return "disneychannel.se";
    }
    elsif( $filename =~ /^DC/i and $filename !~ /\((\d\d\d\d)/i ) {
      return "disneychannel.se";
    }

    return undef;
  }

  if( $dir =~ /Bloomberg/ and $filename =~ /\.(xls|xlsx)$/i ) {
      return "europe.bloomberg.com";
  }

  if( $dir =~ /GlobalListings/ ) {
    # Russia Today
    return "international.rt.com" if $filename =~ /^RTINT/i;
    return "russia.rt.com" if $filename =~ /^RTRUS/i;

    return "hd.natgeo.se" if $filename =~ /^ng\s*swe\s*hd\b/i;

   	# Nat geo wild sends in XLS format
    return "wild.natgeo.se" if $filename =~ /^ngwscan\s*\b/i;

	  # History Channel
	  if($filename =~ /\.xml$/i and ($filename =~ /his.eur./i or $filename =~ /history.eur./i or $filename =~ /history.europe./i or $filename =~ /history\s+europe/i)) {
      return "historytv.se"  if $filename =~ /swe/i;
      return "historytv.fi"  if $filename =~ /fin/i;
      return "historytv.no"  if $filename =~ /nor/i;
      return "historytv.dk"  if $filename =~ /dan/i;
      return "historytv.eu"  if $filename =~ /eng/i;
    }

    return "crimeandinvestigation.eu"  if $filename =~ /cai.eng/i and $filename =~ /\.xml$/i;
    return "crimeandinvestigation.eu"  if $filename =~ /ci europe english/i and $filename =~ /\.xml$/i;
    return "crimeandinvestigation.pl"  if $filename =~ /cai.pol/i and $filename =~ /\.xml$/i;

    return "natgeo.dk" if $filename =~ /^ngden/i and $filename =~ /\.xls$/i;
    return "natgeo.no" if $filename =~ /^ngnor/i and $filename =~ /\.xls$/i;
    return "natgeotv.com" if $filename =~ /^ngscan/i and $filename =~ /\.xls$/i and $filename !~ /^ngden/i;
    return "natgeotv.com" if $filename =~ /^ngswe_fin/i and $filename =~ /\.xls$/i and $filename !~ /^ngden/i;
    return "people.natgeo.dk" if $filename =~ /^ngppl\.den/i and $filename =~ /\.xls$/i;

	  # Travel Channel
    return "travelchanneltv.se" if $filename =~ /^travel.eu.swe/i and $filename =~ /\.xls$/i;
    return "travelchanneltv.de" if $filename =~ /^travel.eu.ger/i and $filename =~ /\.xls$/i;
    return "travelchanneltv.pl" if $filename =~ /^travel.eu.pol/i and $filename =~ /\.xls$/i;
    return "travelchanneltv.eu" if $filename =~ /^travel.eu.eng/i and $filename =~ /\.xls$/i;

    # E! Entertainment
    return "se.eonline.com" if $filename =~ /^e\s*swe\b/i;
    return "dk.eonline.com" if $filename =~ /^e\s*dan\b/i;
    return "no.eonline.com" if $filename =~ /^e\s*nor\b/i;
    return "se.eonline.com" if $filename =~ /^eeuremea\.swe/i;
    return "dk.eonline.com" if $filename =~ /^eeuremea\.dan/i;
    return "no.eonline.com" if $filename =~ /^eeuremea\.nor/i;


    return "eu.eonline.com" if $filename =~ /^e\s*eng\b/i;
    return "de.eonline.com"  if $filename =~ /^eent\.ger\b/i and $filename =~ /\.xls$/i;
    return "de.eonline.com"  if $filename =~ /^e\s*ger\b/i and $filename =~ /\.xls$/i;
    return "de.eonline.com"  if $filename =~ /^eger/i and $filename =~ /\.xml$/i;
    return "de.eonline.com"  if $filename =~ /eger\d\d\d\d/i and $filename =~ /\.xml$/i;

    # FOX TV
    return "foxtv.no"       if $filename =~ /^fox\s*norway/i and $filename =~ /\.(xls|xlsx)$/i;
    return "foxtv.se"       if $filename =~ /^fox\s*sweden/i and $filename =~ /\.(xls|xlsx)$/i;



    # H2
    if(($filename =~ /h2\s+europe/i or $filename =~ /h2.eur./i or $filename =~ /h2.eu./i) and $filename =~ /\.xml$/i) {
        return "h2.historytv.se"  if $filename =~ /swe/i;
        return "h2.historytv.no"  if $filename =~ /nor/i;
        return "h2.historytv.dk"  if $filename =~ /dan/i;
        return "h2.historytv.fi"  if $filename =~ /fin/i;
        return "h2.historytv.eu"  if $filename =~ /eng/i;
    }

    # Benelux schedules for Universal
    return "13thstreet.nl" if $filename =~ /^13\.Ben\.Dut/i;
    return "en.13thstreet.nl" if $filename =~ /^13\.Ben\.Eng/i;
    return "syfy.nl" if $filename =~ /^Syfy\.Ben\.Dut/i;
    return "en.syfy.nl" if $filename =~ /^Syfy\.Ben\.Eng/i;

    return "syfy.nl" if $filename =~ /^Syfy\s*Benelux/i and $filename =~ /DUT/;
    return "en.syfy.nl" if $filename =~ /^Syfy\s*Benelux/i and $filename =~ /ENG/;

    # Sky News
    return "international.skynews.com" if $filename =~ /^SKYNI/i and $filename =~ /\.txt$/i;
    return "international.skynews.com" if $filename =~ /^SKYH/i and $filename =~ /\.txt$/i;
    return "international.skynews.com" if $subject =~ /^Sky News International/i and $filename =~ /\.txt$/i;

    # horseandcountry
    return "horseandcountry.tv" if $filename =~ /^H.C SWE/i and $filename =~ /\.xml/i;
    return "horseandcountry.tv" if $filename =~ /^H.C SWE/i and $filename =~ /\.zip/i;

    # Poland
    return "crimeandinvestigation.pl"   if $filename =~ /^CI\.Polsat/i and $filename =~ /\.xml$/i;
    return "h2.historytv.pl"            if ($filename =~ /^h2\s+europe\s+polish/i or $filename =~ /^h2\.eur\.pol/i) and $filename =~ /\.xml$/i;
    return "historytv.pl"               if ($filename =~ /^history\.pol/i or $filename =~ /^history\.eur\.pol/i) and $filename =~ /\.xml$/i;
    return "lifetimetv.pl"              if ($filename =~ /^lifetime\s+poland/i or $filename =~ /^lifetime\.pol/i or $filename =~ /^life\.pol/i) and $filename =~ /\.xml$/i;
    return "natgeo.pl"                  if $filename =~ /^NGpol/i and $filename =~ /\.doc$/i;
    return "wild.natgeo.pl"             if $filename =~ /^NGWPol/i and $filename =~ /\.doc$/i;
    return "wild.natgeo.pl"             if $filename =~ /^NGW\(CEE\)Pol/i and $filename =~ /\.doc$/i;


 }

 if( $dir =~ /Kanal10/ and $filename =~ /\.doc$/i and $from =~ /\@kanal10.se/i ) {
     return "kanal10.se";
 }

 if( $dir =~ /Kanal10/ and $filename =~ /\.xlsx$/i and $from =~ /\@kanal10.no/i ) {
    return "kanal10.no";
 }

 if( $dir =~ /France24/ and $filename =~ /\.zip$/i ) {
     return "france24.com" if $filename =~ /ANGL/i;
     return "france24.com" if $filename =~ /ENGL/i;
     return "ar.france24.com" if $filename =~ /ARAB/i;
     return "fr.france24.com" if $filename =~ /FRAN/i;
 }

 if( $dir =~ /Gmail/ ) {
     # XLS
     if($filename =~ /\.xls$/i) {
        return "privatespice.com" if $filename =~ /^private/i;
        return "protv.ro" if $from =~ /\@protv.ro/i;
        return "xite.tv" if $from =~ /\@xite.nl/i;
        return "xite.tv" if $filename =~ /^xite/i;
     }

     # Word
     if($filename =~ /\.doc$/i) {
        return "brazzerstveurope.com" if $filename =~ /^brazzers/i;
        return "kanal10.se" if $filename =~ /^programtabl/i;
        return "kanal10.se" if $from =~ /catarina.cl\@gmail\.com/i;
     }

     # XML
     if($filename =~ /\.xml$/i) {
        return "bibeltv.de" if $filename =~ /bibeltv/i;
     }

     # Gospel
     if($from =~ /sigrun\.ei/i and $filename =~ /\.xls$/i) {
       return "gospel.tv";
     }
 }

 if( $dir =~ /Playboy/ ) {
     return "europe.playboytv.com" if $filename =~ /^playboy/i and $filename =~ /\.doc$/i;
     return "adultchannel.co.uk" if $filename =~ /^the\s*adult/i and $filename =~ /\.doc$/i;
     return "brazzerstveurope.com" if $filename =~ /^brazzers/i and $filename =~ /\.docx$/i;
     return "europe.realitykings.com" if $filename =~ /^rktv/i and $filename =~ /\.docx$/i;
 }

 if( $dir =~ /Hustler/ and $filename =~ /\.(xls|xlsx)$/i ) {
     return "europe.bluehustler.com" if $filename =~ /^blue.*gmt.*\b/i;
     return "europe.hustlertv.com" if $filename =~ /^hustler.*gmt.*\b/i;
     return "europe.daringtv.com" if $filename =~ /^daring.*gmt.*\b/i;
     return "europe.daringtv.com" if $filename =~ /^private.*gmt.*\b/i;
 }

 if( $dir =~ /YaS/ and $filename =~ /\.(xlsx|xls)$/i ) {
     return "nauticalchannel.net";
 }

 if( $dir =~ /Motors/ and $filename =~ /\.xls$/i ) {
     return "motorstv.com" if $filename =~ /pgms/i and $filename !~ /french/i;
 }

 if( $dir =~ /TravelChannel/ and $filename =~ /\.xls$/i ) {
     return "travelchanneltv.se" if $filename =~ /^epg\s*\b/i;
 }

 if( $dir =~ /Fatstone/ and $filename =~ /\.xlsx$/i ) {
     return "fatstone.tv";
 }

 if( $dir =~ /LifestyleTV/ and $filename =~ /\.xls|.xlsx$/i ) {
     return "lifestyletv.se";
 }

 if( $dir =~ /TVChile/ and $filename =~ /\.xls|.xlsx$/i ) {
     return "tvchile.cl";
 }

 if( $dir =~ /FuelTV/ and $filename =~ /\.xls|.xlsx$/i ) {
     return "fuel.tv";
 }

 if( $dir =~ /GodTV/ and $filename =~ /\.xlsx$/i ) {
     return "god.tv";
 }

 if( $dir =~ /LuxeTV/ and $filename =~ /\.xls$/i ) {
     return "luxe.tv" if $filename =~ /\d\.xls$/i;
 }

 if( $dir =~ /CNBC/ and $filename =~ /\.xml/i ) {
   	return "europe.cnbc.com";
 }

 if ( $dir =~ /OKGoteborg/ and $filename =~ /\.doc$/i ) {
    return "oppnakanalengoteborg.se";
 }

 if ( $dir =~ /ATV/ and $filename =~ /\.xml$/i ) {
    return "atv.at" if $filename =~ /^ATV/i and $filename !~ /^ATV2/i;
    return "atv2.at" if $filename =~ /^ATV2/i;
 }

 if( $dir =~ /Uptown/ and $filename =~ /\.xls$/i ) {
     return "classic.uptown.dk" if $filename =~ /classic/i;
 }

 if ( $dir =~ /KinoPolska/ and $filename =~ /\.xlsx$/i ) {
    return "kinopolska.pl" if $filename =~ /Kino Polska/i and $filename !~ /International/i;
    return "kinopolska.pl" if $filename =~ /\s+KP\s+/i and $filename !~ /INT/i;
    return "int.kinopolska.pl" if $filename =~ /Kino Polska International/i;
    return "int.kinopolska.pl" if $filename =~ /KP INT/i;
    return "int.kinopolska.pl" if $filename =~ /KP USA/i; # Looks like it changed name to KP USA
    return "kinopolskamuzyka.pl" if $filename =~ /KPM/i and $filename !~ /INT/i;
    return "int.kinopolskamuzyka.pl" if $filename =~ /KPM INT/i;

    # GMT+2
    return "360tunebox.spi.pl" if $filename =~ /^360TuneBox/i and $filename =~ /UTC\+2/i;
    return "docubox.spi.pl" if $filename =~ /^DocuBox/i and $filename =~ /UTC\+2/i;
    return "erox.spi.pl" if $filename =~ /^Erox/i and $filename =~ /UTC\+2/i;
    return "eroxxx.spi.pl" if $filename =~ /^Eroxxx/i and $filename =~ /UTC\+2/i;
    return "fashionbox.spi.pl" if $filename =~ /^FashionBox/i and $filename =~ /UTC\+2/i;
    return "fastandfun.spi.pl" if $filename =~ /^Fast&Fun/i and $filename =~ /UTC\+2/i;
    return "fightbox.spi.pl" if $filename =~ /^FightBox/i and $filename =~ /UTC\+2/i;

    # These ones are weird, different files each month
    return "filmboxbasic.spi.pl" if $filename =~ /^FilmBox_Basic/i and $filename =~ /HU/i;
    return "filmboxfamily.spi.pl" if $filename =~ /^FilmBox_Family/i and $filename =~ /HU/i;
    return "filmboxhd.spi.pl" if $filename =~ /^FilmBox_ExtraHD/i and $filename =~ /HU/i;
    return "filmboxplus.spi.pl" if $filename =~ /^FilmBox_Plus/i and $filename =~ /HU/i;
    return "filmboxpremium.spi.pl" if $filename =~ /^FilmBox_Premium/i and $filename =~ /HU/i;

    return "arthouse.spi.pl" if $filename =~ /^Arthouse/i and $filename =~ /EN/i;
 }

 return undef;
}

my $filestores = {};

sub GetFileStore {
  my( $importer ) = @_;

  if( not defined $filestores->{$importer} ) {
    $filestores->{$importer} = CreateFileStore( $importer );
  }

  return $filestores->{$importer}
}

sub md5sum {
  my( $file ) = @_;
  open(FILE, $file) or die "Can't open '$file': $!";
  binmode(FILE);

  return Digest::MD5->new->addfile(*FILE)->hexdigest;
}
